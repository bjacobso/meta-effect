{
  "$schema": "./schema.json",
  "components": [
    {
      "name": "ci-pipeline-types",
      "type": "effect-ci",
      "description": "Effect Schema types for strongly-typed CI/CD pipelines. Provides validation for git commits, GitHub PRs, and LLM-generated release notes.",
      "files": [
        "effect-ci/types.ts"
      ],
      "dependencies": [
        "effect"
      ],
      "tags": [
        "ci",
        "schema"
      ]
    },
    {
      "name": "pipeline-transforms",
      "type": "effect-ci",
      "description": "Pure transformation utilities for CI/CD data processing. Includes parsers, deduplication, bucketing, and prompt templates.",
      "files": [
        "effect-ci/transforms.ts"
      ],
      "dependencies": [
        "effect"
      ],
      "tags": [
        "ci"
      ]
    },
    {
      "name": "release-plan-dsl",
      "type": "effect-ci",
      "description": "Effect CLI program for generating weekly release notes from git/GitHub activity. Composes git, gh, and Claude CLI commands into typed pipelines.",
      "files": [
        "effect-ci/release-plan.ts"
      ],
      "dependencies": [
        "@effect/cli",
        "@effect/platform",
        "@effect/platform-node",
        "effect"
      ],
      "tags": [
        "ci"
      ]
    },
    {
      "name": "shell-command-runners",
      "type": "effect-ci",
      "description": "Effect-based wrappers around git, gh, and claude CLI commands. Uses @effect/platform/Command for pure, typed shell execution.",
      "files": [
        "effect-ci/shell-runner.ts"
      ],
      "dependencies": [
        "@effect/platform",
        "effect"
      ],
      "tags": [
        "ci"
      ]
    },
    {
      "name": "dag-builder-helpers",
      "type": "effect-dag",
      "description": "Ergonomic builder functions for constructing DAG nodes and edges without manual type casting. Provides a fluent API for building workflow definitions.",
      "files": [
        "effect-dag/dag-builder.ts"
      ],
      "dependencies": [],
      "tags": [
        "dag",
        "workflow"
      ]
    },
    {
      "name": "dag-config",
      "type": "effect-dag",
      "description": "Main orchestration for typed workflow DAGs. Combines types, validation, and builder helpers into a validated DagConfig schema with JSON/YAML serialization.",
      "files": [
        "effect-dag/dag-config.ts"
      ],
      "dependencies": [
        "effect",
        "yaml"
      ],
      "tags": [
        "dag",
        "workflow"
      ]
    },
    {
      "name": "dag-interpreter",
      "type": "effect-dag",
      "description": "Local execution engine for workflow DAGs. Executes nodes in topological order with support for parallel execution, retry policies, and custom task runners.",
      "files": [
        "effect-dag/dag-interpreter.ts"
      ],
      "dependencies": [
        "effect"
      ],
      "tags": [
        "dag",
        "execution",
        "workflow"
      ]
    },
    {
      "name": "dag-to-mermaid",
      "type": "effect-dag",
      "description": "Generate Mermaid diagrams from workflow DAGs for visualization and documentation. GitHub automatically renders Mermaid in markdown files.",
      "files": [
        "effect-dag/dag-to-mermaid.ts"
      ],
      "dependencies": [
        "node:fs"
      ],
      "tags": [
        "dag",
        "diagrams",
        "visualization",
        "workflow"
      ]
    },
    {
      "name": "dag-types",
      "type": "effect-dag",
      "description": "Branded types and Effect Schema definitions for typed workflow DAGs. Defines nodes (task, gate, fanout, fanin), edges, triggers, and configuration. General-purpose primitives for orchestration, pipelines, and automation.",
      "files": [
        "effect-dag/dag-types.ts"
      ],
      "dependencies": [
        "effect"
      ],
      "tags": [
        "dag",
        "schema",
        "workflow"
      ]
    },
    {
      "name": "dag-validation",
      "type": "effect-dag",
      "description": "Pure validation functions for workflow DAGs. Validates edge references, detects cycles, checks for self-loops, and ensures gate nodes have valid conditions.",
      "files": [
        "effect-dag/dag-validation.ts"
      ],
      "dependencies": [
        "effect"
      ],
      "tags": [
        "dag",
        "validation",
        "workflow"
      ]
    },
    {
      "name": "dag-workflow-dsl",
      "type": "effect-dag",
      "description": "High-level declarative API for defining workflows, inspired by Effect's RpcGroup and HttpApi patterns. Provides a fluent, schema-based interface for building validated workflow definitions.",
      "files": [
        "effect-dag/dag-workflow.ts"
      ],
      "dependencies": [],
      "tags": [
        "dag",
        "workflow"
      ]
    },
    {
      "name": "event-helpers-component",
      "type": "effect-livestore",
      "description": "Type-safe event creators and dispatchers for LiveStore with Effect Schema validation and automatic error handling. * LiveStore uses event sourcing, where all state changes are described as immutable events. This component provides helpers to create and dispatch events in an Effect-friendly way with full type safety.",
      "files": [
        "effect-livestore/event-helpers.ts"
      ],
      "dependencies": [
        "@livestore/livestore",
        "effect"
      ],
      "tags": [
        "livestore"
      ]
    },
    {
      "name": "livestore-atom-component",
      "type": "effect-livestore",
      "description": "Reactive Jotai atoms that automatically subscribe to LiveStore queries, providing fine-grained reactivity for UI components. * LiveStore queries are automatically reactive - when events mutate the underlying SQLite state, subscribed queries re-execute. This component bridges that reactivity into Jotai's atom model.",
      "files": [
        "effect-livestore/livestore-atom.ts"
      ],
      "dependencies": [
        "jotai"
      ],
      "tags": [
        "atoms",
        "livestore"
      ]
    },
    {
      "name": "livestore-service-component",
      "type": "effect-livestore",
      "description": "Effect Service wrapper around LiveStore instance providing type-safe event dispatch, queries, and subscriptions as Effects and Streams. * This component demonstrates the Service pattern for managing LiveStore lifecycle and providing a functional API for event sourcing operations.",
      "files": [
        "effect-livestore/livestore-service.ts"
      ],
      "dependencies": [
        "@livestore/livestore",
        "effect"
      ],
      "tags": [
        "livestore"
      ]
    },
    {
      "name": "advanced-prisma-transaction-component",
      "type": "effect-prisma",
      "description": "Demonstrates advanced transaction patterns with Prisma's interactive transaction API, including nested transaction support, manual commit/rollback, and scoped transaction lifecycle. * Requires Prisma Client Extensions for $begin, $commit, $rollback. See: https://www.prisma.io/docs/orm/prisma-client/queries/transactions#interactive-transactions-api",
      "files": [
        "effect-prisma/db-transaction.ts"
      ],
      "dependencies": [
        "@prisma/client",
        "effect",
        "~"
      ],
      "tags": [
        "action",
        "database",
        "prisma"
      ]
    },
    {
      "name": "prisma-with-effect-component",
      "type": "effect-prisma",
      "description": "Wraps Prisma Client in Effect services with automatic error handling and transaction support. Provides a clean way to compose database operations with other Effect services.",
      "files": [
        "effect-prisma/db-client.ts"
      ],
      "dependencies": [
        "@prisma/client",
        "effect",
        "~"
      ],
      "tags": [
        "database",
        "prisma"
      ]
    },
    {
      "name": "effect-action-component",
      "type": "effect-remix",
      "description": "Provides patterns for handling form actions in Remix using Effect services. Includes Schema validation, typed errors, and automatic error responses.",
      "files": [
        "effect-remix/effect-action.ts"
      ],
      "dependencies": [
        "@remix-run/node",
        "effect",
        "~"
      ],
      "tags": [
        "action",
        "remix"
      ]
    },
    {
      "name": "effect-loader-component",
      "type": "effect-remix",
      "description": "Provides patterns for data loading in Remix using Effect services. Handles parallel loading, error boundaries, and request-scoped services.",
      "files": [
        "effect-remix/effect-loader.ts"
      ],
      "dependencies": [
        "@remix-run/node",
        "effect",
        "~"
      ],
      "tags": [
        "loader",
        "remix"
      ]
    },
    {
      "name": "remix-with-effect-component",
      "type": "effect-remix",
      "description": "Helper utilities for composing Effect services with Remix loaders and actions. Provides a clean way to run Effect programs in Remix route handlers with automatic Layer provision and error handling.",
      "files": [
        "effect-remix/with-effect.ts"
      ],
      "dependencies": [
        "@remix-run/node",
        "effect",
        "~"
      ],
      "tags": [
        "remix"
      ]
    },
    {
      "name": "api-atom-component",
      "type": "effect-vite",
      "description": "Wraps HttpApi client calls in reactive atoms for fine-grained reactivity. Provides query (read) and mutation (write) atoms with automatic caching and invalidation.",
      "files": [
        "effect-vite/api-atom.ts"
      ],
      "dependencies": [
        "jotai"
      ],
      "tags": [
        "api",
        "atoms",
        "vite"
      ]
    },
    {
      "name": "http-api-definition-component",
      "type": "effect-vite",
      "description": "Defines a type-safe HttpApi with Effect Schema validation. This is the core primitive for defining your API surface.",
      "files": [
        "effect-vite/http-api.ts"
      ],
      "dependencies": [
        "@effect/platform",
        "effect"
      ],
      "tags": [
        "api",
        "vite"
      ]
    },
    {
      "name": "route-atom-component",
      "type": "effect-vite",
      "description": "Synchronizes atoms with URL search params and route params. Changes to the atom automatically update the URL, and URL changes update the atom - providing two-way binding with the browser location.",
      "files": [
        "effect-vite/route-atom.ts"
      ],
      "dependencies": [
        "effect",
        "jotai"
      ],
      "tags": [
        "atoms",
        "vite"
      ]
    },
    {
      "name": "vite-plugin-for-effect-httpapi",
      "type": "effect-vite",
      "description": "Mounts Effect HttpApi routes as Vite middleware during development. This allows your Effect services to run directly in the Vite dev server with hot module replacement.",
      "files": [
        "effect-vite/vite-plugin.ts"
      ],
      "dependencies": [
        "@effect/platform",
        "effect",
        "vite"
      ],
      "tags": [
        "api",
        "vite"
      ]
    }
  ],
  "presets": [
    {
      "name": "ci-full",
      "description": "Complete effect-ci setup with all components",
      "components": [
        "ci-pipeline-types",
        "pipeline-transforms",
        "release-plan-dsl",
        "shell-command-runners"
      ]
    },
    {
      "name": "ci-minimal",
      "description": "Minimal effect-ci with essential components",
      "components": [
        "ci-pipeline-types"
      ]
    },
    {
      "name": "dag-full",
      "description": "Complete effect-dag setup with all components",
      "components": [
        "dag-builder-helpers",
        "dag-config",
        "dag-interpreter",
        "dag-to-mermaid",
        "dag-types",
        "dag-validation",
        "dag-workflow-dsl"
      ]
    },
    {
      "name": "dag-minimal",
      "description": "Minimal effect-dag with essential components",
      "components": [
        "dag-builder-helpers"
      ]
    },
    {
      "name": "livestore-full",
      "description": "Complete effect-livestore setup with all components",
      "components": [
        "event-helpers-component",
        "livestore-atom-component",
        "livestore-service-component"
      ]
    },
    {
      "name": "livestore-minimal",
      "description": "Minimal effect-livestore with essential components",
      "components": [
        "event-helpers-component"
      ]
    },
    {
      "name": "prisma-full",
      "description": "Complete effect-prisma setup with all components",
      "components": [
        "advanced-prisma-transaction-component",
        "prisma-with-effect-component"
      ]
    },
    {
      "name": "prisma-minimal",
      "description": "Minimal effect-prisma with essential components",
      "components": [
        "advanced-prisma-transaction-component"
      ]
    },
    {
      "name": "remix-full",
      "description": "Complete effect-remix setup with all components",
      "components": [
        "effect-action-component",
        "effect-loader-component",
        "remix-with-effect-component"
      ]
    },
    {
      "name": "remix-minimal",
      "description": "Minimal effect-remix with essential components",
      "components": [
        "effect-action-component"
      ]
    },
    {
      "name": "vite-full",
      "description": "Complete effect-vite setup with all components",
      "components": [
        "api-atom-component",
        "http-api-definition-component",
        "route-atom-component",
        "vite-plugin-for-effect-httpapi"
      ]
    },
    {
      "name": "vite-minimal",
      "description": "Minimal effect-vite with essential components",
      "components": [
        "api-atom-component"
      ]
    }
  ]
}
