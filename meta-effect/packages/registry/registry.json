{
  "$schema": "./schema.json",
  "components": [
    {
      "name": "http-api",
      "type": "effect-vite",
      "description": "Type-safe HttpApi definition with Effect Schema validation",
      "files": ["effect-vite/http-api.ts"],
      "dependencies": ["@effect/platform", "effect"],
      "tags": ["api", "schema", "vite"]
    },
    {
      "name": "vite-plugin",
      "type": "effect-vite",
      "description": "Vite plugin that mounts Effect HttpApi as dev server middleware",
      "files": ["effect-vite/vite-plugin.ts"],
      "dependencies": ["@effect/platform", "effect", "vite"],
      "tags": ["vite", "plugin", "dev-server"]
    },
    {
      "name": "api-atom",
      "type": "effect-vite",
      "description": "Reactive atoms for Effect HttpApi with caching and invalidation",
      "files": ["effect-vite/api-atom.ts"],
      "dependencies": ["jotai", "effect"],
      "tags": ["atoms", "reactivity", "caching"]
    },
    {
      "name": "route-atom",
      "type": "effect-vite",
      "description": "Atoms synchronized with URL search params and route params",
      "files": ["effect-vite/route-atom.ts"],
      "dependencies": ["jotai", "effect"],
      "tags": ["atoms", "routing", "url"]
    },
    {
      "name": "with-effect",
      "type": "effect-remix",
      "description": "Simple helpers for wrapping Remix loaders/actions with Effect",
      "files": ["effect-remix/with-effect.ts"],
      "dependencies": ["@remix-run/node", "effect"],
      "tags": ["remix", "loader", "action"]
    },
    {
      "name": "effect-loader",
      "type": "effect-remix",
      "description": "Advanced Effect loader patterns with error handling",
      "files": ["effect-remix/effect-loader.ts"],
      "dependencies": ["@remix-run/node", "effect"],
      "tags": ["remix", "loader", "error-handling"]
    },
    {
      "name": "effect-action",
      "type": "effect-remix",
      "description": "Effect action helpers with Schema validation",
      "files": ["effect-remix/effect-action.ts"],
      "dependencies": ["@remix-run/node", "effect"],
      "tags": ["remix", "action", "validation", "forms"]
    },
    {
      "name": "ci-types",
      "type": "effect-ci",
      "description": "Effect Schema types for CI/CD pipelines: Commit, PR, ReleaseJSON",
      "files": ["effect-ci/types.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "schema", "types"]
    },
    {
      "name": "shell-runner",
      "type": "effect-ci",
      "description": "Typed wrappers around git, gh, and claude CLI commands",
      "files": ["effect-ci/shell-runner.ts"],
      "dependencies": ["effect", "@effect/platform", "@effect/platform-node"],
      "tags": ["ci", "shell", "command"]
    },
    {
      "name": "transforms",
      "type": "effect-ci",
      "description": "Pure transform utilities: parse, dedupe, filter, prompt building",
      "files": ["effect-ci/transforms.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "transform", "pipeline"]
    },
    {
      "name": "release-plan",
      "type": "effect-ci",
      "description": "Effect CLI program for generating weekly release notes",
      "files": ["effect-ci/release-plan.ts"],
      "dependencies": ["effect", "@effect/cli", "@effect/platform", "@effect/platform-node"],
      "tags": ["ci", "cli", "release-notes", "github-actions"]
    },
    {
      "name": "dag-types",
      "type": "effect-ci",
      "description": "Branded types and Effect Schema definitions for typed CI/CD DAG workflows",
      "files": ["effect-ci/dag-types.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "dag", "schema", "workflow"]
    },
    {
      "name": "dag-builder",
      "type": "effect-ci",
      "description": "Ergonomic builder functions for constructing DAG nodes and edges",
      "files": ["effect-ci/dag-builder.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "dag", "builder", "workflow"]
    },
    {
      "name": "dag-config",
      "type": "effect-ci",
      "description": "Main orchestration for DAGs with validation and JSON/YAML serialization",
      "files": ["effect-ci/dag-config.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "dag", "config", "workflow"]
    },
    {
      "name": "dag-validation",
      "type": "effect-ci",
      "description": "Pure validation functions for DAGs: edge references, cycles, self-loops",
      "files": ["effect-ci/dag-validation.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "dag", "validation", "workflow"]
    },
    {
      "name": "dag-workflow",
      "type": "effect-ci",
      "description": "High-level declarative DSL for defining CI/CD workflows",
      "files": ["effect-ci/dag-workflow.ts"],
      "dependencies": ["effect"],
      "tags": ["ci", "dag", "dsl", "workflow"]
    },
    {
      "name": "livestore-service",
      "type": "effect-livestore",
      "description": "Effect Service wrapper for LiveStore with typed dispatch, queries, and subscriptions",
      "files": ["effect-livestore/livestore-service.ts"],
      "dependencies": ["effect", "@livestore/livestore"],
      "tags": ["livestore", "service", "event-sourcing"]
    },
    {
      "name": "event-helpers",
      "type": "effect-livestore",
      "description": "Type-safe event creators and dispatchers with Effect Schema validation",
      "files": ["effect-livestore/event-helpers.ts"],
      "dependencies": ["effect", "@livestore/livestore"],
      "tags": ["livestore", "events", "validation"]
    },
    {
      "name": "livestore-atom",
      "type": "effect-livestore",
      "description": "Reactive Jotai atoms that auto-subscribe to LiveStore queries",
      "files": ["effect-livestore/livestore-atom.ts"],
      "dependencies": ["jotai", "@livestore/livestore"],
      "tags": ["livestore", "atoms", "reactivity"]
    },
    {
      "name": "db-client",
      "type": "effect-prisma",
      "description": "Prisma Client wrapped in Effect service with error handling",
      "files": ["effect-prisma/db-client.ts"],
      "dependencies": ["@prisma/client", "effect"],
      "tags": ["prisma", "database", "service"]
    },
    {
      "name": "db-transaction",
      "type": "effect-prisma",
      "description": "Advanced transaction patterns with nested transaction support",
      "files": ["effect-prisma/db-transaction.ts"],
      "dependencies": ["@prisma/client", "effect"],
      "tags": ["prisma", "database", "transactions"]
    },
    {
      "name": "sql-generator",
      "type": "effect-prisma",
      "description": "Prisma generator that creates Effect Schema Models using @effect/sql",
      "files": ["effect-prisma/sql-generator.ts", "effect-prisma/example-schema.prisma"],
      "dependencies": ["@prisma/generator-helper", "effect", "@effect/sql"],
      "tags": ["prisma", "codegen", "sql", "schema"]
    },
    {
      "name": "compiler-service",
      "type": "effect-compilers",
      "description": "Generic compiler interface for schema-to-code transformations",
      "files": ["effect-compilers/compiler-service.ts"],
      "dependencies": ["effect"],
      "tags": ["compiler", "schema", "codegen"]
    },
    {
      "name": "dag-to-github-actions",
      "type": "effect-compilers",
      "description": "Compile workflow DAGs to GitHub Actions YAML",
      "files": ["effect-compilers/dag-to-github-actions.ts"],
      "dependencies": ["effect"],
      "tags": ["compiler", "dag", "github-actions", "ci"]
    },
    {
      "name": "dag-to-step-functions",
      "type": "effect-compilers",
      "description": "Compile workflow DAGs to AWS Step Functions ASL",
      "files": ["effect-compilers/dag-to-step-functions.ts"],
      "dependencies": ["effect"],
      "tags": ["compiler", "dag", "aws", "step-functions"]
    }
  ],
  "presets": [
    {
      "name": "vite-full",
      "description": "Complete effect-vite setup with all components",
      "components": ["http-api", "vite-plugin", "api-atom", "route-atom"]
    },
    {
      "name": "remix-full",
      "description": "Complete effect-remix setup with all components",
      "components": ["with-effect", "effect-loader", "effect-action"]
    },
    {
      "name": "vite-minimal",
      "description": "Minimal effect-vite with just HttpApi",
      "components": ["http-api", "vite-plugin"]
    },
    {
      "name": "remix-minimal",
      "description": "Minimal effect-remix with basic helpers",
      "components": ["with-effect"]
    },
    {
      "name": "ci-full",
      "description": "Complete effect-ci setup for release automation and DAG workflows",
      "components": ["ci-types", "shell-runner", "transforms", "release-plan", "dag-types", "dag-builder", "dag-config", "dag-validation", "dag-workflow"]
    },
    {
      "name": "ci-release",
      "description": "Release automation components only",
      "components": ["ci-types", "shell-runner", "transforms", "release-plan"]
    },
    {
      "name": "ci-dag",
      "description": "DAG workflow definition and validation components",
      "components": ["dag-types", "dag-builder", "dag-config", "dag-validation", "dag-workflow"]
    },
    {
      "name": "livestore-full",
      "description": "Complete effect-livestore setup with all components",
      "components": ["livestore-service", "event-helpers", "livestore-atom"]
    },
    {
      "name": "prisma-full",
      "description": "Complete effect-prisma setup with transactions and SQL generator",
      "components": ["db-client", "db-transaction", "sql-generator"]
    },
    {
      "name": "prisma-minimal",
      "description": "Minimal effect-prisma with basic client wrapper",
      "components": ["db-client"]
    },
    {
      "name": "compilers-full",
      "description": "Complete effect-compilers setup for multi-target code generation",
      "components": ["compiler-service", "dag-to-github-actions", "dag-to-step-functions"]
    }
  ]
}
